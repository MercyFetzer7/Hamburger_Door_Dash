# Mercy Fetzer, Isabelle Turner, Luke Farley, Luke Kehl, Nathan Blickenstaff
# Section 004
# Using the openpyxl library, import one of the excel files. 
# Create a new workbook, sheets for the different classes. 
# Filter through the unorganized excel file
# Display the information on excel in an neat and organized order
import os
import platform

import openpyxl
from openpyxl import Workbook
from openpyxl.utils import get_column_letter
from openpyxl.styles import Font

#Not required but cool
def clear_screen():
    if platform.system() == 'Windows':
        os.system('cls')
    else:
        os.system('clear')

#Not required but cool
clear_screen()

#Open Excel File for reading
myWorkbook = openpyxl.load_workbook("Poorly_Organized_Data_1.xlsx")

#Set active sheet
currSheet = myWorkbook.active

#Make a new workbook for writing
newBook = Workbook()

#Remove current worksheet
newBook.remove(newBook["Sheet"])

#Read the file
#You need to know your data!
#min_row : Which row to start on
#max_col : Number of coluns to read
#max_row : Number of rows to read
for row in currSheet.iter_rows(min_row = 2, max_col = 3, max_row = 181):
    #Read first column value for current row
    #data is returned as a list
    classname =row[0].value

    studentinfo = row[1].value
    #Split the data based upon the underscore symbol
    studentinfo = studentinfo.split('_')
    #This creates a list with 2 positions
    #[0] is the first name
    #[1] is the last name
    #[2] is the student id
    #Store the split data into variables
    firstname = studentinfo[0]
    lastname = studentinfo[1]
    studentid = studentinfo[2] 

    grade = row[2].value

    #next open the respective sheet and start copying over the data
    #select algebra and paste the algebra info
    if classname not in newBook.sheetnames:
        newSheet = newBook.create_sheet(title=classname)
        # Add info to the new sheet
        newSheet.append(["Last Name", "First Name", "Student ID", "Grade"])
        #adds all the filters to the headers of each sheet
        newSheet.auto_filter.ref = "a1:d1"
    else:
        newSheet = newBook[classname]
    #adds the data to the new sheet
    newSheet.append([lastname, firstname, studentid, grade])


#adds formulas table to each sheet
for sheet in newBook.sheetnames:
    currentSheet = newBook[sheet]

    #Keep track of the row below the max
    iMaxRow = currentSheet.max_row + 1
    #Keep track of the column to the right of the last column
    iMaxCol = currentSheet.max_column + 1
    #Access a column based upon the position
    #get_column_letter takes an integer and returns a character
    #For example, 1 returns A, 2 returns B, etc.currentSheet["F1"] = "Statistics"
    currentSheet["F1"] = "Summary Statistics"
    currentSheet["F2"] = "Highest Grade"
    currentSheet["F3"] = "Lowest Grade"
    currentSheet["F4"] = "Mean Grade"
    currentSheet["F5"] = "Median Grade"
    currentSheet["F6"] = "Number of Students"

    currentSheet["G1"] = "Value"
    currentSheet["G2"] = "=MAX(D2:D" + str(currentSheet.max_row) + ")"
    currentSheet["G3"] = "=MIN(D2:D" + str(currentSheet.max_row) + ")"
    currentSheet["G4"] = "=MEAN(D2:D" + str(currentSheet.max_row) + ")"
    currentSheet["G5"] = "=MEDIAN(D2:D" + str(currentSheet.max_row) + ")"
    currentSheet["G6"] = "=COUNT(D2:D" + str(currentSheet.max_row) + ")"

    #Process all of the cells on the first row (i.e start row, end row)
    for cell in currentSheet["1:1"]:
        #Change the cell to be bold
        #This makes each cell in the first row bold
        cell.font = Font(bold=True)
        #If the cell has a value
        if cell.value is not None:
            #add 5 to each column width for the cell in the worksheet
            currentSheet.column_dimensions[cell.column_letter].width = len(str(cell.value)) + 5
#new Excel file name
ouputfile = "P1-excel.xlsx"
newBook.save(filename="P1-excel.xlsx")
newBook.close()
#Not required but cool
#open the file
os.system(f"start excel {ouputfile}")
